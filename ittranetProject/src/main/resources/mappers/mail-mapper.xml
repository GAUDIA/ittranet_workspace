<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mailMapper">

	<resultMap id="mailResult" type="Mail">
		<result column="receive_mail_no" property="receiveMailNo" />
		<result column="send_mail_no" property="sendMailNo" />
		<result column="sdpp" property="empNameSd" />
		<result column="sender_account" property="senderAccount" />
		<result column="receiver_account" property="receiverAccount" />
		<result column="mail_title" property="mailTitle" />
		<result column="send_date" property="sendDate" />
		<result column="tem_status" property="temStatus" />
		<result column="mail_content" property="mailContent" />
		<result column="statusSd" property="statusSd" />
		<result column="wroteme_status" property="wrotemeStatus" />
		<result column="read" property="read" />
		<result column="important" property="important" />
		<result column="spam" property="spam" />
		<result column="statusRv" property="statusRv" />
		<result column="rvpp" property="empNameRv" />
	</resultMap>
	
	<resultMap id="attachmentResult" type="Attachment">
		<result column="attachment_no" property="attachmentNo" />
		<result column="origin_name" property="originName" />
		<result column="change_name" property="changeName" />
		<result column="file_path" property="filePath" />
		<result column="ref_code" property="refCode" />
		<result column="ref_no" property="refNo" />
	</resultMap>

	<!-- 받은메일함 -->
	<select id="selectListCount" resultType="_int">
		select
			   count(*)
		  from mail_receive
		 where status = 'Y'
		   and spam = 'N'
		   and emp_no = #{empNo}
	</select>
	<select id="selectList" resultMap="mailResult">
    	select send_mail_no
     		 , sdpp
     		 , mail_title
      		 , send_date
     		 , receiver_account
     		 , statusRv
     		 , receive_mail_no
     		 , important
     		 , spam
		 from(
		select send_mail_no
		      , emp_name sdpp
		      , mail_title
		      , send_date
		      , receiver_account
              , rv.status statusRv
              , receive_mail_no
              , important
              , spam
		  from mail_send sd
		  join employee using(emp_no)
		  join mail_receive rv using (send_mail_no)
		 where tem_status = 'N')
		 where receiver_account = #{receiveAccount}
      	   and statusRv = 'Y'
      	   and spam = 'N'
		 order
	   	    by send_mail_no desc
	</select>
	
	<!-- 메일 상세조회 (메일, 첨부파일) -->
	<select id="selectMail" resultMap="mailResult">
		select
                 send_mail_no
               , e1.emp_name sdpp
               , e2.emp_name rvpp
               , sender_account
               , mail_title
               , mail_content
               , send_date
               , receiver_account
               , receive_mail_no
               , spam
               , ms.status statusSd
               , mail_receive.status statusRv
            from mail_send ms
            join employee e1 on (ms.emp_no = e1.emp_no)
            join mail_receive using(send_mail_no)
           join employee e2 on(receiver_account = e2.email)
          where send_mail_no = #{sendMailNo}
	</select>
	<select id="selectMailAttachment" resultMap="attachmentResult">
		select
			   origin_name
			 , change_name
			 , file_path
		  from attachment
		 where ref_code = 'M'
		   and ref_no = #{sendMailNo}
	</select>
	<update id="updateUnreadMail">
		update
			   mail_receive
		   set read = 'Y'
		 where send_mail_no = #{mno}
	</update>
	
	<!-- 메일쓰기 -->
	<insert id="insertMailSd">
		insert
		  into mail_send
		     (
		       send_mail_no
          	 , emp_no
		  	 , sender_account
		  	 , mail_title
		  	 , mail_content
		  	 )
		values
		     (
		       seq_sdmno.nextval
		     , #{empNameSd}
		  	 , #{senderAccount}
		  	 , #{mailTitle}
		  	 , #{mailContent}
		     )
	</insert>
	<insert id="insertMailRv">
    	insert
          into mail_receive
             (
          	   receive_mail_no
          	 , send_mail_no
          	 , receiver_account
          	 )
        values
          	 (
          	   seq_rvmno.nextval
          	 , seq_sdmno.currval
          	 <choose>
          	 <when test="receiverAccount != null">
          	 , #{receiverAccount}
          	 </when>
          	 <otherwise>
          	 , #{senderAccount}
          	 </otherwise>
          	 </choose>
          	 )
	</insert>
	<insert id="insertMailAttachment">
		insert
		  into attachment
		        (
		           attachment_no
		         , origin_name
		         , change_name
		         , file_path
		         , ref_code
		         , ref_no
		        )
		values
		        (
		          seq_atno.nextval
		        , #{originName}
		        , #{changeName}
		        , #{filePath}
		        , 'M'
		        , seq_sdmno.currval
		        )
	</insert>
	
	<!-- 휴지통 -->
	<select id="selectBinListCount" resultType="_int">
		select
			   count(*)
		  from mail_receive rv
          join mail_send sd using(send_mail_no)
		 where (rv.status = 'T'
           or sd.status = 'T')
		   and (rv.receiver_account = #{receiverAccount}
           or sd.sender_account = #{senderAccount})
	</select>
	<select id="selectBinList" resultMap="mailResult">
		select send_mail_no
             , sender_account
     		 , emp_name sdpp
     		 , mail_title
      		 , send_date
     		 , receiver_account
     		 , rvst
             , sdst
             , spam
             , receive_mail_no
		 from(
		select send_mail_no
              , sender_account
		      , emp_name
		      , mail_title
		      , send_date
		      , receiver_account
              , rv.status rvst
              , sd.status sdst
              , spam
              , receive_mail_no
		  from mail_send sd
		  join employee using(emp_no)
		  join mail_receive rv using (send_mail_no)
		 where tem_status = 'N')
		 where (receiver_account = #{receiverAccount}
            or sender_account = #{senderAccount})
      	   and (rvst = 'T'
            or sdst = 'T')
		 order
	   	    by send_mail_no desc
	  </select>
	  
	  <!-- 안읽은메일함 -->
	  <select id="selectUnreadListCount" resultType="_int">
	  	select
			   count(*)
		  from mail_receive rv
          join mail_send sd using(send_mail_no)
		 where rv.status = 'Y'
           and rv.read = 'N'
		   and rv.receiver_account = #{receiverAccount}
	  </select>
	  <select id="selectUnreadList" resultMap="mailResult">
	  	select send_mail_no
     		 , emp_name sdpp
     		 , mail_title
      		 , send_date
     		 , receiver_account
     		 , statusRv
             , read
             , important
             , spam
             , statusSd
		 from(
		select send_mail_no
		      , emp_name
		      , mail_title
		      , send_date
		      , receiver_account
              , rv.status statusRv
              , read
              , important
              , spam
              , sd.status statusSd
		  from mail_send sd
		  join employee using(emp_no)
		  join mail_receive rv using (send_mail_no)
		 where tem_status = 'N')
		 where receiver_account = #{receiverAccount}
      	   and statusRv = 'Y'
           and read = 'N'
		 order
	   	    by send_mail_no desc
	  </select>
	  
	  <!-- 중요메일함 -->
	  <select id="selectImpoListCount" resultType="_int">
	    select
			   count(*)
		  from mail_receive rv
          join mail_send sd using(send_mail_no)
		 where rv.status in ('Y')
           and rv.important = 'Y'
		   and rv.receiver_account = #{receiverAccount}
	  </select>
	  <select id="selectImpoList" resultMap="mailResult">
	  	select send_mail_no
     		 , emp_name sdpp
     		 , mail_title
      		 , send_date
     		 , receiver_account
     		 , rvst
             , important
             , receive_mail_no
		 from(
		select send_mail_no
		      , emp_name
		      , mail_title
		      , send_date
		      , receiver_account
              , rv.status rvst
              , important
              , receive_mail_no
		  from mail_send sd
		  join employee using(emp_no)
		  join mail_receive rv using (send_mail_no)
		 where tem_status = 'N')
		 where receiver_account = #{receiveAccount}
      	   and rvst = 'Y'
           and important = 'Y'
		 order
	   	    by send_mail_no desc
	  </select>
	  
	  <!-- 스팸메일함 -->
	  <select id="selectSpamListCount" resultType="_int">
		select
			   count(*)
		  from mail_receive
		 where status = 'Y'
           and spam = 'N'
		   and receiver_account = #{receiverAccount}
	  </select>
	  <select id="selectSpamList" resultMap="mailResult">
	  	select send_mail_no
     		 , emp_name sdpp
     		 , mail_title
      		 , send_date
     		 , receiver_account
     		 , rvst
             , spam
             , receive_mail_no
		 from(
		select send_mail_no
		      , emp_name
		      , mail_title
		      , send_date
		      , receiver_account
              , rv.status rvst
              , spam
              , receive_mail_no
		  from mail_send sd
		  join employee using(emp_no)
		  join mail_receive rv using (send_mail_no)
		 where tem_status = 'N')
		 where receiver_account = #{receiverAccount}
      	   and rvst = 'Y'
           and spam = 'Y'
		 order
	   	    by send_mail_no desc
	  </select>
	  
	  <!-- 보낸메일함 -->
	  <select id="selectSendListCount" resultType="_int">
	  	select
			   count(*)
		  from mail_receive rv
          join mail_send sd using(send_mail_no)
          join employee e on (sd.sender_account = e.email)
		 where sd.sender_account = #{senderAccount}
		   and sd.status = 'Y'
		   and tem_status = 'N'
	  </select>
	  <select id="selectSendList" resultMap="mailResult">
	  	  select 
      		     emp_name rvpp
      		   , mail_title
      		   , send_date
     		   , receiver_account
      	       , send_mail_no
      		   , msst
      		   , important
      		   , receive_mail_no
  		   from(select
                 	   mv.emp_no  rvpp
                  	 , mail_title
                  	 , send_date
                 	 , receiver_account
                 	 , send_mail_no
                 	 , ms.status msst
                 	 , important
                 	 , receive_mail_no
                  from mail_send ms
              	  join mail_receive mv using(send_mail_no)
              	 where ms.sender_account = #{senderAccount}
                   and ms.status = 'Y'
                   and tem_status = 'N')
  	  left join employee on (email = receiver_account)
	  </select>
	  
	  <!-- 임시보관함 -->
	  <select id="selectTemListCount" resultType="_int">
	  	select
			   count(*)
		  from mail_receive rv
          join mail_send sd using(send_mail_no)
          join employee e on (sd.sender_account = e.email)
		 where sd.sender_account = #{senderAccount}
		   and sd.status = 'Y'
           and sd.tem_status = 'Y'
	  </select>
	  <select id="selectTemList" resultMap="mailResult">
	  	select
			   emp_name rvpp
			 , mail_title
			 , send_date
			 , receiver_account
			 , send_mail_no
			 , msst
			 , receive_mail_no
		from(select
				     mv.emp_no rvpp
				   , mail_title
				   , send_date
				   , receiver_account
				   , send_mail_no
				   , ms.status msst
				   , receive_mail_no
		  		from mail_send ms
				join mail_receive mv using(send_mail_no)
			   where ms.sender_account = #{senderAccount}
				 and ms.status = 'Y'
				 and tem_status = 'Y')
		    left join employee on (email = receiver_account)
	  </select>
	  
	  <!-- 리스트 : 메일 삭제 (받은메일함 비롯 외) -->
	  <update id="deleteMail">
	  	update
		       mail_receive
		   set status= 'T'
	     where receive_mail_no = #{receiveNo}
	  </update>
	  
	  <update id="sdDeleteMail">
	  	update
	  		   mail_send
	  	   set status = 'T'
	  	 where send_mail_no = #{sendNo}
	  </update>
	  
	  <!-- 리스트 : 완전삭제 (스팸메일함, 휴지통) -->
	  <update id="comDeleteMail">
	  	update
	  		   mail_receive
	  	   set status = 'N'
	  	 where receive_mail_no = #{receiveNo}
	  </update>
	  
	  <!-- 리스트 : 메일 복원 -->
	  <update id="restorationMail">
	  	update
	  			mail_receive
	  	   set spam = 'N',
	  	  	   status = 'Y'
	  	 where receive_mail_no = #{receiveNo}
	  </update>
	  
	  <!-- 리스트 : 중요메일 체크/체크해제 -->
	  <update id="updateImportantMail">
		update
			   mail_receive
		<choose>
		<when test='important == "N"'>
		    set important = 'Y'
		</when>
		<otherwise>
			set important = 'N'
		</otherwise>
		</choose>
		 where receive_mail_no = #{rvno}
		   and status = 'Y'
		   and spam = 'N'
	  </update>
	  
	  <!-- 리스트 : 중요메일 체크/체크해제 (보낸메일함) (진행중)-->
	  <update id="updateImportantSendMail">
		update
               mail_receive
		<choose>
		<when test='important == "N"'>
			set important = 'Y'
		</when>
		<otherwise>
			set important = 'N'
		</otherwise>
		</choose>
			where send_mail_no = #{rvno}
	  	</update>
	  	
	  	<!-- 디테일 : 스팸 -->
		<update id="updateSpamMail">
			update
			   	   mail_receive
		   	   set spam = 'Y'
		 	 where receive_mail_no = #{rvno}
	    </update>
	    
	    <!-- 디테일 : 삭제 -->
	  	<update id="deleteOneMail">
	  		update
	  		<if test="statusCheck == 1">
	  			   mail_receive	   
	  		   set status = 'T'
	  		 where receive_mail_no = #{rvno}
	  		</if>
	  		<if test="statusCheck == 2">
	  			   mail_send
	  		   set status = 'T'
	  		  where send_mail_no = #{mno}
	  		</if>
	  	</update>
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	
</mapper>